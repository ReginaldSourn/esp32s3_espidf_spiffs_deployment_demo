name: ESP32-S3 CI/CD Pipeline

on:
  push:
    branches: [ main,  develop ]
    tags:
      - 'v*'  # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allows manual triggering

env:
  FIRMWARE_VERSION: ${{ github.ref_name }}

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:24.04
      options: --privileged

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        apt-get update
        DEBIAN_FRONTEND=noninteractive apt-get install -y \
          git \
          wget \
          flex \
          bison \
          gperf \
          python3 \
          python3-pip \
          python3-venv \
          python3-setuptools \
          cmake \
          ninja-build \
          ccache \
          libffi-dev \
          libssl-dev \
          dfu-util \
          libusb-1.0-0 \
          usbutils \
          curl \
          jq

    - name: Set up ESP-IDF
      run: |
        mkdir -p /opt/esp
        cd /opt/esp
        git clone --recursive https://github.com/espressif/esp-idf.git -b v5.3.1
        cd esp-idf
        ./install.sh esp32s3

    - name: Set environment variables
      run: |
        echo "IDF_PATH=/opt/esp/esp-idf" >> $GITHUB_ENV
        echo "IDF_TARGET=esp32s3" >> $GITHUB_ENV
        echo "ESP_IDF_TOOLS_PATH=/opt/esp/tools" >> $GITHUB_ENV
        echo "IDF_TOOLS_PATH=/opt/esp/tools" >> $GITHUB_ENV
        echo "PATH=/opt/esp/tools/tools/xtensa-esp32s3-elf/esp-12.2.0_20230208/xtensa-esp32s3-elf/bin:/opt/esp/esp-idf/tools:$PATH" >> $GITHUB_ENV

    - name: Build project
      run: |
        source /opt/esp/esp-idf/export.sh
        # Navigate to the project directory if needed
        # cd your_project_directory
        
        # Build the project
        idf.py build

    - name: Run static code analysis
      run: |
        source /opt/esp/esp-idf/export.sh
        # Example using cppcheck (you would need to install it first)
        # apt-get update && apt-get install -y cppcheck
        # cppcheck --enable=all --suppress=missingIncludeSystem main/

    - name: Run unit tests
      run: |
        source /opt/esp/esp-idf/export.sh
        # Run tests if your project has them
        # idf.py -p PORT test
        
        # Or use specific test commands if needed
        # For example:
        # python -m pytest test/

    - name: Create firmware package
      if: success()
      run: |
        source /opt/esp/esp-idf/export.sh
        mkdir -p firmware-package
        cp build/bootloader/bootloader.bin firmware-package/
        cp build/*.bin firmware-package/
        cp build/*.elf firmware-package/
        cp build/*.map firmware-package/
        
        # Create version.txt with build info
        echo "Firmware version: ${FIRMWARE_VERSION:-dev}" > firmware-package/version.txt
        echo "Build date: $(date)" >> firmware-package/version.txt
        echo "Commit: ${{ github.sha }}" >> firmware-package/version.txt
        
        # Create a zip archive
        apt-get update && apt-get install -y zip
        zip -r esp32s3-spiffs.zip firmware-package/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: esp32s3-spiffs
        path: esp32s3-spiffs.zip
        if-no-files-found: error

  deploy-development:
    needs: build
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: esp32s3-spiffs
      
      - name: Deploy to development environment
        run: |
          echo "Deploying firmware to development server..."
          # Example: Upload to an FTP server or S3 bucket for development testing
          # This is a placeholder - implement the actual deployment method you need
          # aws s3 cp esp32s3-spiffs.zip s3://your-dev-bucket/esp32s3/latest/
          echo "Deployed to development environment successfully"

  deploy-staging:
    needs: build
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: esp32s3-spiffs
      
      - name: Deploy to staging environment
        run: |
          echo "Deploying firmware to staging server..."
          # Example: Upload to staging environment
          # This is a placeholder - implement the actual deployment method you need
          # aws s3 cp esp32s3-spiffs.zip s3://your-staging-bucket/esp32s3/latest/
          echo "Deployed to staging environment successfully"

  deploy-production:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: esp32s3-spiffs
      
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: esp32s3-spiffs.zip
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Deploy to production environment
        run: |
          echo "Deploying firmware to production server..."
          # Example: Upload to production environment
          # This is a placeholder - implement the actual deployment method you need
          # aws s3 cp esp32s3-spiffs.zip s3://your-production-bucket/esp32s3/${{ github.ref_name }}/
          echo "Deployed to production environment successfully"